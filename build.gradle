plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.2'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'univ.earthbreaker'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2023.0.0")
    snippetsDir = file('build/generated-snippets')
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

configurations {
    asciidoctorExt
    configureEach {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

dependencies {
    // ========== allprojects or subprojects 로 관리될 전역 의존성 ==========
    implementation 'org.jetbrains:annotations:23.0.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // ========== core:api ==========
    implementation 'org.springframework.boot:spring-boot-starter-web'
    // + implementation project(":core:auth")
    // + implementation project(":core:domain")
    // + implementation project(":external:oauth")
    // + implementation project(":external:aws")
    // + implementation project(":external:notification")
    // + testImplementation project(":support:apidocs")

    // ========== core:auth ==========
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    // + implementation project(":core:domain")

    // ========== core:domain ==========
    compileOnly 'org.springframework:spring-context'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    // implementation project(":event")

    // ========== database ==========
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    // + implementation project(":core:domain")
    // + implementation project(":core:auth")

    // ========== external:oauth ==========
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

    // ========== external:aws ==========
    implementation 'com.amazonaws:aws-java-sdk-s3:1.12.685'
    implementation 'org.testcontainers:localstack'
    testImplementation 'org.testcontainers:junit-jupiter'
    // implementation project(":event")

    // ========== event ==========
    // compileOnly 'org.springframework:spring-context' // Kafka 또는 RabbitMQ 등 교체 가능

    // ========== external:notification ==========
    implementation 'com.google.firebase:firebase-admin:9.2.0'


    // ========== support:logging ==========
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
    implementation 'com.lmax:disruptor:3.4.2'

    // ========== support:apidocs ==========
    testImplementation 'com.fasterxml.jackson.core:jackson-databind' // 멀티 모듈 설정 시 compileOnly 의존성
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc' // 멀티 모듈 설정 시 apiElements 의존성
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
}

tasks.named('test') {
    useJUnitPlatform()
    outputs.dir snippetsDir
}

asciidoctor {
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'
    dependsOn test
}

bootJar {
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}
